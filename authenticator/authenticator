#!/usr/bin/env tclsh8.6
# vim: ft=tcl foldmarker=<<<,>>> foldmethod=marker ts=4 shiftwidth=4

if {![info exists ::tcl::basekit]} {
	package require platform
	foreach platform [platform::patterns [platform::identify]] {
		set tm_path		[file join $env(HOME) .tbuild repo tm $platform]
		set pkg_path	[file join $env(HOME) .tbuild repo pkg $platform]
		if {[file exists $tm_path]} {
			tcl::tm::path add $tm_path
		}
		if {[file exists $pkg_path]} {
			lappend auto_path $pkg_path
		}
	}
}

proc mungekey {args} {}
#proc mungekey {key} {
#	set build	0
#	binary scan $key c* bytes
#	foreach byte $bytes {
#		incr build	$byte
#	}
#	return [format "%i" $build] 
#}

set here	[file dirname [file normalize [info script]]]

package require cflib

cflib::config create cfg $argv {
	variable uri				tcp://localhost:5300
	variable prkey				/etc/codeforge/authenticator/keys/env/authenticator.pr
	variable svc				authenticator
	variable svc_keys			/etc/codeforge/authenticator/svc_keys
	variable crypto_devmode		0
	variable plugin_dir			/etc/codeforge/authenticator/plugins
	variable cookie_shelflife	20000
	variable heartbeat_interval	120
	switch -- $::tcl_platform(platform) {
		"unix"	{variable db	/var/lib/codeforge/authenticator/authenticator.sqlite3}
		default	{variable db	authenticator.sqlite3}
	}
	variable debug				0
	variable loglevel			notice
	variable daemon				0		;# obsolete
	variable evlog_uri			""
} /etc/codeforge/authenticator.conf

package require sqlite3
package require sop
package require m2
package require evlog
package require logging

evlog connect "authenticator [info hostname] [pid]" [cfg get evlog_uri]

logging::logger ::log [cfg get loglevel] \
		-hook {evlog event log.%level% {$msg}}

if {[cfg get debug]} {
	proc ?? {script} {uplevel 1 $script}
} else {
	proc ?? {args} {}
}


source [file join $here crypto.tcl]
source [file join $here users.tcl]
source [file join $here userchans.tcl]
source [file join $here user.tcl]
source [file join $here userkeys.tcl]
source [file join $here svckeys.tcl]
source [file join $here plugins.tcl]
source [file join $here admin.tcl]

proc init {} { #<<<
	set ::online	[dict create]
	set ::userchans	[dict create]

	interp bgerror {} [list apply {
		{errmsg options} {
			log error [dict get $options -errorinfo]
		}
	}]

	m2::api2 create m2 -uri [cfg get uri]

	# Init db <<<
	sqlite3 db [cfg get db]
	if {[db onecolumn {
		select
			count(1) < 1
		from
			sqlite_master
		where
			type = 'table'
			and name = 'delegations'
	}]} {
		db eval {
			create table delegations (
				domain_match	text primary key,
				plugin_name		text not null,
				plugin_params	text
			);
		}
	}
	# Init db >>>

	package require crypto

	Crypto create crypto
	Users create users
	Userkeys create userkeys
	Svckeys create svckeys
	Plugins create plugins
	Admin create admin

	[m2 signal_ref connected] attach_output [list apply {
		{newstate} {
			log LOG_INFO "m2 connection state: [expr {$newstate ? "connected" : "not connected"}]"
			if {$newstate} {
				log LOG_INFO "Advertising service \"[cfg get svc]\""
				m2 handle_svc [cfg get svc] [list apply {
					{seq data} {
						set rest	[lassign $data op]

						switch -- $op {
							"crypt_setup" {
								crypto crypt_setup $seq $rest
							}

							default {
								log LOG_ERR "Unhandled request type: ($op)"
							}
						}
					}
				}]
			} else {
				#log LOG_INFO "Revoking service \"[cfg get svc]\""
				#m2 handle_svc [cfg get svc] ""
			}
		}
	}]
}

#>>>

coroutine coro_init init
vwait forever

