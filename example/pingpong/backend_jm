#!/usr/bin/env tclsh8.6

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

package require Tcl 8.6

tcl::tm::path add [file normalize [file join [file dirname [info script]] .. .. tm]]
source /home/cyan/git/netdgram/tm/netdgram-0.1.tm
package provide netdgram 0.1
source /home/cyan/git/netdgram/tm/netdgram/tcp-0.1.tm
package provide netdgram::tcp 0.1
package require m2
#package require TLC-base 0.99

#class Config {
#	inherit tlc::Baseconfig
#
#	constructor {args} {tlc::Baseconfig::constructor {*}$args} {}
#
#	public {
#		variable uri	"tcp://localhost:5300"
#		variable images	"images"
#	}
#}
#
#Config cfg {*}$argv
#set cfg	[cfg dump_config]
set cfg	{
	uri		"tcp://localhost:5300"
}

m2::api2 create m2 -uri [dict get $cfg uri]
oo::objdefine m2 method station_id {} {
	return "pingpong backend ([next])"
}

set seq	0
proc ping {seq data} {
	#puts "got ping request: $seq \"$data\""
	coroutine keep_pinging[incr ::seq] apply {
		{seq} {
			set jmid	[m2 unique_id]
			m2 pr_jm $jmid $seq "setup"
			for {set i 0} {$i < 4} {incr i} {
				after 1000 [info coroutine]
				yield
				m2 jm $jmid "update $i"
			}
			m2 jm_can $jmid "all done"
		}
	} $seq
	m2 ack $seq "pong: ($data)"
}

[m2 signal_ref connected] attach_output [list apply {
	{newstate} {
		puts "Connection state: [expr {$newstate ? "connected" : "not connected"}]"
		if {$newstate} {
			m2 handle_svc "ping" ping
		} else {
			m2 handle_svc "ping" ""
		}
	}
}]

set ::forever 0
while {1} {
	after 100000 {set ::forever 0}
	vwait ::forever
}

