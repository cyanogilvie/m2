#!/home/cyan/git/cfkit/out/linux/bin/tclsh8.6
#!/usr/bin/env cfkit8.6
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

package require platform

foreach platform [platform::patterns [platform::identify]] {
	set tm_path		[file join $env(HOME) .tbuild repo tm $platform]
	set pkg_path	[file join $env(HOME) .tbuild repo pkg $platform]
	if {[file exists $tm_path]} {
		tcl::tm::path add $tm_path
	}
	if {[file exists $pkg_path]} {
		lappend auto_path $pkg_path
	}
}

package require m2
package require sop
package require cflib
package require evlog
package require logging

cflib::config create cfg $argv {
	variable uri			tcp://:5300
	variable profiling		1
	variable debug			0
	variable senders		1
	variable evlog_uri		""
	variable loglevel		notice
	variable threaded_io	0
}

evlog connect "[file tail [info script]] [info hostname] [pid]" [cfg get evlog_uri]

if {[cfg get debug]} {
	proc ?? script {uplevel 1 $script}
} else {
	proc ?? args {}
}

::logging::logger ::log [cfg get loglevel]

interp bgerror {} [list apply {
	{errmsg options} {
		puts stderr "Background error: $errmsg"
		array set o $options
		parray o
		exit 1
	}
}]

array set signals	{}
sop::gate new signals(ready) -name "ready" -mode "and"
sop::signal new signals(ping) -name "ping"
$signals(ready) attach_input $signals(ping)

if {[cfg get profiling]} {
	m2::api2 create m2 -uri [cfg get uri] -oob_type "profiling" -threaded_io [cfg get threaded_io]
} else {
	m2::api2 create m2 -uri [cfg get uri] -threaded_io [cfg get threaded_io]
}
oo::objdefine m2 method station_id {} {
	return "pingpong frontend ([next])"
}
$signals(ready) attach_input [m2 signal_ref connected]

oo::objdefine m2 method svc_avail_changed {} {
	puts stderr "svc_avail_changed: [m2 svc_avail ping]"
	$::signals(ping) set_state [m2 svc_avail "ping"]
}

[m2 signal_ref connected] attach_output [list apply {
	{newstate} {
		puts "Connection state: [expr {$newstate ? "connected" : "not connected"}]"
	}
}]


proc got_ping {msg} {
	global start_usec last_usec last_output

	switch -- [dict get $msg oob_type] {
		1 {}
		profiling {
			set profile	[dict get $msg oob_data]
		}
	}

	switch -- [dict get $msg type] {
		ack {
			set data	[dict get $msg data]
			#puts "got ack: ($data)"
			if {![string match "*hello, world*" $data]} {
				puts stderr "ack data doesn't look right:\n($data)"
				exit 1
			}
			incr ::received

			sendping
		}

		nack {
			puts "got nack: ([dict get $msg data])"
		}

		default {
			puts "unexpected response type: \"[dict get $msg type]\""
		}
	}
	if {[info exists profile]} {
		if {[info exists start_usec]} {
			unset start_usec
		}
		if {[info exists last_usec]} {
			unset last_usec
		}
		if {![info exists last_output]} {
			set last_output	[clock microseconds]
		}
		set now	[clock microseconds]
		if {$now - $last_output > 1000000} {
			set last_output	$now
			puts stderr "profiling info:"
			foreach stamp $profile {
				lassign $stamp usec_abs point station_id
				if {![info exists start_usec]} {
					set start_usec	$usec_abs
				}
				if {![info exists last_usec]} {
					set last_usec	$usec_abs
				}
				set usec_from_start	[expr {$usec_abs - $start_usec}]
				set usec_from_last	[expr {$usec_abs - $last_usec}]
				set last_usec		$usec_abs

				puts stderr [format "%11.3f %10.3f %7s %s" \
						[expr {$usec_from_start / 1000.0}] \
						[expr {$usec_from_last / 1000.0}] \
						$point \
						$station_id]
			}
		}
	}
}

proc sendping {} {
	m2 req "ping" "hello, world" got_ping
}

proc ping {} {
	set afterid	""
	while {1} {
		m2 req "ping" "hello, world" [list apply {
			{coro args} {$coro $args}
		} [info coroutine]]

		lassign [yield] resp
		dict with resp {}

		switch -- $oob_type {
			1 {}
			profiling {
				set profile	$oob_data
			}
		}

		switch -- $type {
			ack {
				#puts "got ack: ($data)"
				if {![string match "*hello, world*" $data]} {
					puts stderr "ack data doesn't look right:\n($data)"
					exit 1
				}
				incr ::received
			}

			nack {
				puts "got nack: ($data)"
			}

			default {
				puts "unexpected response type: \"$type\""
			}
		}
		if {[info exists profile]} {
			if {[info exists start_usec]} {
				unset start_usec
			}
			if {[info exists last_usec]} {
				unset last_usec
			}
			if {![info exists last_output]} {
				set last_output	[clock microseconds]
			}
			set now	[clock microseconds]
			if {$now - $last_output > 1000000} {
				set last_output	$now
				puts stderr "profiling info:"
				foreach stamp $profile {
					lassign $stamp usec_abs point station_id
					if {![info exists start_usec]} {
						set start_usec	$usec_abs
					}
					if {![info exists last_usec]} {
						set last_usec	$usec_abs
					}
					set usec_from_start	[expr {$usec_abs - $start_usec}]
					set usec_from_last	[expr {$usec_abs - $last_usec}]
					set last_usec		$usec_abs

					puts stderr [format "%11.3f %10.3f %7s %s" \
							[expr {$usec_from_start / 1000.0}] \
							[expr {$usec_from_last / 1000.0}] \
							$point \
							$station_id]
				}
			}
		}
		#after cancel $afterid; set afterid	""
		#set afterid	[after 500 [info coroutine]]
		##set afterid	[after idle [info coroutine]]
		#yield
	}
}

proc startping {} {
	set ::received	0
	coroutine stats apply {
		{} {
			set start_window	[clock microseconds]
			while {1} {
				set afterid	[after 1000 [info coroutine]]
				yield
				set end_window		[clock microseconds]
				set window_usec		[expr {$end_window - $start_window}]
				set start_window	$end_window
				set received		$::received
				set ::received		0

				set persec		[expr {$received / ($window_usec / 1000000.0)}]
				puts stderr [format "request round-trips per second: %.4f" \
						$persec]
			}
		}
	}
	#coroutine pinging ping
	for {set i 0} {$i < [cfg get senders]} {incr i} {
		sendping
	}
}

$signals(ready) attach_output [list apply {
	{newstate} {
		puts [expr {$newstate ? "ready" : "not ready"}]
		if {$newstate} {
			startping
		} else {
			if {[info commands stats] eq {stats}} {
				rename stats {}
			}
			if {[info commands pinging] eq {pinging}} {
				rename pinging {}
			}
		}
	}
}]

vwait ::forever

