#!/home/cyan/git/cfkit/out/linux/bin/tclsh8.6
#!/usr/bin/env cfkit8.6
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

package require platform

foreach platform [platform::patterns [platform::identify]] {
	set tm_path		[file join $env(HOME) .tbuild repo tm $platform]
	set pkg_path	[file join $env(HOME) .tbuild repo pkg $platform]
	if {[file exists $tm_path]} {
		tcl::tm::path add $tm_path
	}
	if {[file exists $pkg_path]} {
		lappend auto_path $pkg_path
	}
}

package require m2
package require cflib
package require evlog
package require logging

cflib::config create cfg $argv {
	variable uri			tcp://:5300
	variable debug			0
	variable evlog_uri		""
	variable loglevel		notice
	variable threaded_io	0
}

evlog connect "[file tail [info script]] [info hostname] [pid]" [cfg get evlog_uri]
logging::logger ::log [cfg get loglevel]

if {[cfg get debug]} {
	proc ?? {script} {uplevel 1 $script}
} else {
	proc ?? {args} {}
}

m2::api2 create m2 -uri [cfg get uri] -threaded_io [cfg get threaded_io]

set seq	0
proc ping {seq data} {
	m2 ack $seq "pong: ($data)"
}

[m2 signal_ref connected] attach_output [list apply {
	{newstate} {
		puts "m2 connection state: [expr {$newstate ? "connected" : "not connected"}]"
		if {$newstate} {
			m2 handle_svc "ping" ping
		} else {
			m2 handle_svc "ping" ""
		}
	}
}]

vwait ::forever


