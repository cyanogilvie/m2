#!/usr/bin/env cfkit8.6
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

package require platform

foreach platform [platform::patterns [platform::identify]] {
	set tm_path		[file join $env(HOME) .tbuild repo tm $platform]
	set pkg_path	[file join $env(HOME) .tbuild repo pkg $platform]
	if {[file exists $tm_path]} {
		tcl::tm::path add $tm_path
	}
	if {[file exists $pkg_path]} {
		lappend auto_path $pkg_path
	}
}

proc log {lvl msg args} {puts $msg}

::tcl::tm::path add /home/cyan/git/mezzanineware/scripts/tm/tcl

namespace eval crypto {variable devmode 1}

package require Mezzanineware 0.15
#package require TLC-base 0.99

#class Config {
#	inherit tlc::Baseconfig
#
#	constructor {args} {tlc::Baseconfig::constructor {*}$args} {}
#
#	public {
#		variable uri	"tcp://localhost:5300"
#		variable images	"images"
#	}
#}
#
#Config cfg {*}$argv
#set cfg	[cfg dump_config]
set cfg	{
	ip		localhost
	port	5300
}


array set signals	{}
tlc::Gate #auto signals(ready) -name "ready" -mode "and"
tlc::Signal #auto signals(ping) -name "ping"
$signals(ready) attach_input $signals(ping)

proc log_msg {op data orig_size} {
	switch -- $op {
		send {
			set msg	$data
			set msg_data	[$msg get_data]
		}

		recv {
			set msg	$data
			set msg_data	[$msg get_data]
		}
	}
}

mware::API2 mware -ip localhost -port 5300 -cb_mode msg_dict -oob_type profiling -log_msg_cb log_msg
#mware::API2 mware -ip localhost -port 5300 -cb_mode msg_dict
$signals(ready) attach_input [mware signal_ref connected]

proc svc_avail_changed {} {
	puts stderr "svc_avail_changed: [mware svc_avail ping]"
	$::signals(ping) set_state [mware svc_avail "ping"]
}
mware register_handler svc_avail_changed svc_avail_changed

[mware signal_ref connected] attach_output [list apply {
	{newstate} {
		puts "Connection state: [expr {$newstate ? "connected" : "not connected"}]"
	}
}]

set afterid	""
proc ping {} {
	global last_output

	mware req "ping" "hello, world" [list apply {
		{msg_data} {
			dict with msg_data {}

			switch -- $oob_type {
				1 {}
				profiling {
					set profile	$oob_data
				}
			}

			switch -- $type {
				ack {
					#puts "got ack: ($data)"
					if {![string match "*hello, world*" $data]} {
						puts stderr "ack data doesn't look right:\n($data)"
						exit 1
					}
					incr ::received
				}

				nack {
					puts "got nack: ($data)"
				}

				default {
					puts "unexpected response type: \"$type\""
				}
			}

			if {[info exists profile]} {
				if {![info exists ::last_output]} {
					set ::last_output	[clock microseconds]
				}
				set now	[clock microseconds]
				if {$now - $::last_output > 1000000} {
					set ::last_output	$now
					puts stderr "profiling info:"
					foreach stamp $profile {
						lassign $stamp usec_abs point station_id
						if {![info exists start_usec]} {
							set start_usec	$usec_abs
						}
						if {![info exists last_usec]} {
							set last_usec	$usec_abs
						}
						set usec_from_start	[expr {$usec_abs - $start_usec}]
						set usec_from_last	[expr {$usec_abs - $last_usec}]
						set last_usec		$usec_abs

						puts stderr [format "%11.4f %10.4f %7s %s" \
								[expr {$usec_from_start / 1000.0}] \
								[expr {$usec_from_last / 1000.0}] \
								$point \
								$station_id]
					}
				}
			}

			after cancel $::afterid; set ::afterid	""
			set ::afterid	[after idle ping]
		}
	}]
}

set statsafterid	""
proc stats {} {
	global start_window

	if {![info exists start_window]} {
		set start_window	[clock microseconds]
	}
	set ::statsafterid	[after 1000 stats2]
}

proc stats2 {} {
	global start_window

	set end_window		[clock microseconds]
	set window_usec		[expr {$end_window - $start_window}]
	set start_window	$end_window
	set received		$::received
	set ::received		0

	set persec		[expr {$received / ($window_usec / 1000000.0)}]
	puts stderr [format "request round-trips per second: %.4f" \
			$persec]

	stats
}

$signals(ready) attach_output [list apply {
	{newstate} {
		puts [expr {$newstate ? "ready" : "not ready"}]
		if {$newstate} {
			set ::received	0
			ping
			stats
		} else {
			after cancel $::afterid; set ::afterid	""
			after cancel $::statsafterid; set ::statsafterid	""
		}
	}
}]

set ::forever 0
while {1} {
	after 100000 {set ::forever 0}
	vwait ::forever
}

