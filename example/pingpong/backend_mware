#!/usr/bin/env cfkit8.6
# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

package require platform

foreach platform [platform::patterns [platform::identify]] {
	set tm_path		[file join $env(HOME) .tbuild repo tm $platform]
	set pkg_path	[file join $env(HOME) .tbuild repo pkg $platform]
	if {[file exists $tm_path]} {
		tcl::tm::path add $tm_path
	}
	if {[file exists $pkg_path]} {
		lappend auto_path $pkg_path
	}
}

::tcl::tm::path add /home/cyan/git/mezzanineware/scripts/tm/tcl

proc log {lvl msg args} {puts $msg}

namespace eval crypto {variable devmode 1}

package require Mezzanineware
#package require TLC-base 0.99

#class Config {
#	inherit tlc::Baseconfig
#
#	constructor {args} {tlc::Baseconfig::constructor {*}$args} {}
#
#	public {
#		variable uri	"tcp://localhost:5300"
#		variable images	"images"
#	}
#}
#
#Config cfg {*}$argv
#set cfg	[cfg dump_config]
set cfg	{
	uri		"tcp://localhost:5300"
}

mware::API2 mware -ip localhost -port 5300

proc ping {seq data} {
	mware ack $seq "pong: ($data)"
}

[mware signal_ref connected] attach_output [list apply {
	{newstate} {
		puts "Connection state: [expr {$newstate ? "connected" : "not connected"}]"
		if {$newstate} {
			mware handle_svc "ping" ping
		} else {
			mware handle_svc "ping" ""
		}
	}
}]

set ::forever 0
while {1} {
	after 100000 {set ::forever 0}
	vwait ::forever
}

