# vim: foldmarker=<<<,>>> ft=tcl foldmethod=marker shiftwidth=4 ts=4

# Signals:
#	connected()					- fired when connection is established
#	lost_connection()			- fired when connection is lost
#	send(msgobj)				- called with msg we are sending
#	send,$msgtype(msgobj)		- specific message type, ie send,svc_avail
#	incoming(msgobj)			- called with incoming msg
#	incoming,$msgtype(msgobj)	- specific message type, ie send,req

class m2::API {
	inherit tlc::Handlers tlc::Signalsource tlc::Baselog

	constructor {args} {}
	destructor {}

	public {
		variable uri	""							need_reconnect

		variable ip					localhost		need_reconnect
		variable port				5307			need_reconnect
		variable connection_retry	10
		variable logobj				""

		method new_svcs {args}
		method revoke_svcs {args}
		method svc_avail {svc}
		method send_jm {jmid data}
		method send {msg}
		method unique_id {}
		method connected_ref {}
	}

	protected {
		variable dominos
	}

	private {
		variable con
		variable unique				0
		variable svcs
		variable connect_after_id	""
		variable queue
		variable queue_roundrobin	{}
		variable last_connection_attempt	0		; # rate limiter

		method got_msg {msg}
		method attempt_connection {}
		method _svc_avail_changed {}
		method close_con {}
		method receive_raw {raw_msg}
		method connection_lost {}
		method need_reconnect {}
		method assign_queue {raw_msg msg}
		method pick_queue {queues}
		method schedule_reconnect_attempt {}
	}
}


body m2::API::constructor {args} { #<<<
	array set dominos	{}
	array set svcs		{}

	tlc::Domino #auto dominos(need_reconnect) -name "$this need_reconnect"
	tlc::Signal #auto signals(connected) -name "$this connected"
	tlc::Domino #auto dominos(svc_avail_changed) -name "$this svc_avail_changed"

	$dominos(svc_avail_changed) attach_output [code $this _svc_avail_changed]
	$dominos(need_reconnect) attach_output [code $this attempt_connection]

	configure {*}$args
}

#>>>
body m2::API::destructor {} { #<<<
	catch {
		close_con
	} res options
	if {[dict get $options -code] ni {0 2}} {
		puts stderr "Uncaught error in m2::API::destructor: $res\n[dict get $options -errorinfo]"
	}
}

#>>>
body m2::API::new_svcs {args} { #<<<
	if {![$signals(connected) state]} {
		error "Not connected"
	}
	set msg	[m2::msg new new \
		type	svc_avail \
		seq		[incr unique] \
		data	$args \
	]
	send $msg
}

#>>>
body m2::API::revoke_svcs {args} { #<<<
	if {![$signals(connected) state]} return
	set msg	[m2::msg new new \
		type	svc_revoke \
		seq		[incr unique] \
		data	$args \
	]
	send $msg
}

#>>>
body m2::API::svc_avail {svc} { #<<<
	return [info exists svcs($svc)]
}

#>>>
body m2::API::send_jm {jmid data} { #<<<
	set jm	[m2::msg new new \
		prev_seq	0 \
		seq			$jmid \
		data		$data \
		type		jm \
	]
	send $jm
}

#>>>
body m2::API::send {msg} { #<<<
	invoke_handlers send $msg
	invoke_handlers send,[$msg type] $msg

	set sdata	[$msg serialize]
	$queue enqueue $sdata $msg
}

#>>>
body m2::API::unique_id {} { #<<<
	return [incr unique]
}

#>>>
body m2::API::got_msg {msg} { #<<<
	puts "got_msg type: ([$msg type])"
	switch -- [$msg type] {
		svc_avail {
			foreach svc [$msg data] {
				set svcs($svc)	1
			}
			$dominos(svc_avail_changed) tip
		}

		svc_revoke {
			foreach svc [$msg data] {
				array unset svcs $svc
			}
			$dominos(svc_avail_changed) tip
		}
	}

	switch -- [$msg type] {
		svc_avail -
		svc_revoke -
		req -
		rsj_req -
		ack -
		nack -
		pr_jm -
		jm -
		jm_can -
		jm_req -
		jm_disconnect {
			invoke_handlers incoming $msg
			invoke_handlers incoming,[$msg type] $msg
		}

		default {
			error "Got unexpected msg type: ([$msg type])"
		}
	}
}

#>>>
body m2::API::connected_ref {} { #<<<
	return $signals(connected)
}

#>>>
body m2::API::attempt_connection {} { #<<<
	log notice
	after cancel $connect_after_id; set connect_after_id	""

	set last_connection_attempt	[clock seconds]

	if {[info exists con]} {
		close_con
	}
	if {[catch {
		if {$uri eq ""} {
			set uri	"tcp_coroutine://${ip}:${port}"
		}
		set con	[netdgram::connect_uri $uri]
		set queue	[netdgram::queue new]
		$queue attach $con

		oo::objdefine $queue forward closed {*}[code $this connection_lost]
		oo::objdefine $queue forward receive {*}[code $this receive_raw]
		oo::objdefine $queue forward assign {*}[code $this assign_queue]
		# Use the default queue pick behaviour of round-robin
		#oo::objdefine $queue forward pick {*}[code $this pick_queue]

		$con activate
	} errmsg]} {
		if {[info exists queue] && [info object is object $queue]} {
			$queue destroy
			unset queue
		}
		if {[info exists con] && [info object is object $con]} {
			$con destroy
			# $con unset by close_con
		}
		schedule_reconnect_attempt
	} else {
		# Tell the node that we are an application rather than another node.
		# Mostly it doesn't care, but there are odd cases involving multiple
		# listeners on a single jm channel from a single app that cannot be
		# handled efficiently without it.
		set msg	[m2::msg new new \
				type	neighbour_info \
				data	[list type application] \
		]
		send $msg

		$signals(connected) set_state 1
		invoke_handlers connected
	}
}

#>>>
body m2::API::_svc_avail_changed {} { #<<<
	catch {
		invoke_handlers svc_avail_changed
	} res options
	if {[dict get $options -code] in {0 2}} {
		return -options $options $res
	} else {
		puts "Error in handler: $res\n[dict get $options -errorinfo]"
		dict incr options -level
		return -options $options $res
	}
}

#>>>
body m2::API::close_con {} { #<<<
	after cancel $connect_after_id; set connect_after_id	""
	if {[info exists con]} {
		catch {
			if {[info object isa object $con]} {
				$con destroy
			}
		}
		unset con
	}
	set was_connected	[$signals(connected) state]
	$signals(connected) set_state 0
	if {$was_connected} {
		invoke_handlers lost_connection
	}
}

#>>>
body m2::API::receive_raw {raw_msg} { #<<<
	set msg			[m2::msg new deserialize $raw_msg]

	got_msg $msg
}

#>>>
body m2::API::connection_lost {} { #<<<
	$signals(connected) set_state 0
	array unset svcs
	array set svcs	{}
	$dominos(svc_avail_changed) tip
	$dominos(svc_avail_changed) force_if_pending
	invoke_handlers lost_connection
	schedule_reconnect_attempt
}

#>>>
body m2::API::need_reconnect {} { #<<<
	$dominos(need_reconnect) tip
}

#>>>
body m2::API::assign_queue {raw_msg msg} { #<<<
	set m	[$msg get_data]
	switch -- [dict get $m type] {
		"rsj_req" -
		"req" -
		"jm" {
			return [dict get $m seq]
		}

		default {
			return [dict get $m prev_seq]
		}
	}
}

#>>>
body m2::API::pick_queue {queues} { #<<<
	# Note: not used, uses the default netdgram::queue::pick behaviour (round-robin)

	# Default behaviour: roundrobin of queues
	my variable roundrobin
	set new_roundrobin	{}

	# Trim queues that have gone away
	foreach queue $roundrobin {
		if {$queue ni $queues} continue
		lappend new_roundrobin $queue
	}

	# Append any new queues to the end of the roundrobin
	foreach queue $queues {
		if {$queue in $new_roundrobin} continue
		lappend new_roundrobin $queue
	}

	# Pull the next queue off head and add it to the tail
	set roundrobin	[lassign $new_roundrobin next]
	lappend roundrobin	$next

	return $next
}

#>>>
body m2::API::schedule_reconnect_attempt {} { #<<<
	if {[clock seconds] - $last_connection_attempt > $connection_retry} {
		set after_interval	"idle"
	} else {
		set after_interval	[expr {int($connection_retry * 1000)}]
	}
	set connect_after_id	[after $after_interval \
			[code $this attempt_connection]]
}

#>>>
